//Chiron Silva Axel Nicolás
#include <stdio.h>
#include <math.h>
#include <stdlib.h> 

#define MAX_DATOS 100
#define MAX_CLASES 15


struct Clase {
    int limite_inferior, limite_superior;
    int frecuencia;
    double punto_medio;
    int frecuencia_acumulada;
    double frecuencia_relativa;
    double frecuencia_relativa_acumulada;
    int porcentaje;
};

//ordenar datos (para mediana)
void ordenar_datos(int datos[], int num_datos) {
    for (int i = 0; i < num_datos - 1; i++) {
        for (int j = i + 1; j < num_datos; j++) {
            if (datos[i] > datos[j]) {
                int temp = datos[i];
                datos[i] = datos[j];
                datos[j] = temp;
            }
        }
    }
}

//media (promedio) para datos no agrupados
double calcular_media(int datos[], int num_datos) {
    long long suma = 0;
    for (int i = 0; i < num_datos; i++) {
        suma += datos[i];
    }
    return (double)suma / num_datos;
}

//mediana para datos no agrupados
double calcular_mediana(int datos[], int num_datos) {
    int datos_copia[MAX_DATOS];
    for(int i = 0; i < num_datos; i++) {
        datos_copia[i] = datos[i];
    }
    ordenar_datos(datos_copia, num_datos);

    if (num_datos % 2 == 0)
        return (datos_copia[num_datos / 2 - 1] + datos_copia[num_datos / 2]) / 2.0;
    else
        return (double)datos_copia[num_datos / 2];
}

//mModa para datos no agrupados
int calcular_moda(int datos[], int num_datos) {
    int max_val_temp = 0;
    for (int i = 0; i < num_datos; i++) {
        if (datos[i] > max_val_temp) {
            max_val_temp = datos[i];
        }
    }

    int *frecuencia_individual = (int *)calloc(max_val_temp + 1, sizeof(int));
    if (frecuencia_individual == NULL) {
        return -1;
    }

    int max_frecuencia = 0;
    int moda_val = datos[0];

    for (int i = 0; i < num_datos; i++) {
        if (datos[i] >= 0 && datos[i] <= max_val_temp) {
            frecuencia_individual[datos[i]]++;
            if (frecuencia_individual[datos[i]] > max_frecuencia) {
                max_frecuencia = frecuencia_individual[datos[i]];
                moda_val = datos[i];
            }
        }
    }

    free(frecuencia_individual);
    return moda_val;
}

//calcula y muestra la tabla y medidas de tendencia central
void calcular_frecuencias(int datos[], int num_datos, int num_clases) {
    //min y max
    int min_val = datos[0], max_val = datos[0];
    for (int i = 1; i < num_datos; i++) {
        if (datos[i] < min_val) min_val = datos[i];
        if (datos[i] > max_val) max_val = datos[i];
    }
    
    //rango y amplitud
    int rango = max_val - min_val;
    int amplitud = (rango == 0) ? 1 : (rango / num_clases) + 1;
    
    struct Clase clases[MAX_CLASES];
    int limite_inferior = min_val;
    int frecuencia_total = num_datos;
    int fa = 0; 
    double fra = 0; 
    
    //llenar clases
    for (int i = 0; i < num_clases; i++) {
        clases[i].limite_inferior = limite_inferior;
        clases[i].limite_superior = limite_inferior + amplitud - 1;
        clases[i].frecuencia = 0;
        
        for (int j = 0; j < num_datos; j++) {
            if (datos[j] >= clases[i].limite_inferior && datos[j] <= clases[i].limite_superior) {
                clases[i].frecuencia++;
            }
        }
        
        //límite
        if (i == num_clases - 1 && clases[i].limite_superior < max_val) {
            clases[i].limite_superior = max_val;
        }

        clases[i].punto_medio = (clases[i].limite_inferior + clases[i].limite_superior) / 2.0;
        fa += clases[i].frecuencia;
        clases[i].frecuencia_acumulada = fa;
        clases[i].frecuencia_relativa = (double)clases[i].frecuencia / frecuencia_total;
        fra += clases[i].frecuencia_relativa;
        clases[i].frecuencia_relativa_acumulada = fra;
        clases[i].porcentaje = (int)(clases[i].frecuencia_relativa * 100);
        
        limite_inferior += amplitud;
    }
    
    //tabla
    printf("clase\tlimite de clase\tfrecuencia\tpunto medio\tfa\tfr\tfra\tporcentaje %%\n");
    printf("-----------------------------------------------------------------------------------------------------------------\n");
    for (int i = 0; i < num_clases; i++) {
        printf("%d\t%d-%d\t\t%d\t\t%.2f\t\t%d\t%.2f\t%.2f\t%d%%\n",
               i + 1,
               clases[i].limite_inferior, clases[i].limite_superior,
               clases[i].frecuencia, clases[i].punto_medio,
               clases[i].frecuencia_acumulada,
               clases[i].frecuencia_relativa,
               (i == num_clases - 1) ? 1.00 : clases[i].frecuencia_relativa_acumulada,
               clases[i].porcentaje);
    }
    printf("-----------------------------------------------------------------------------------------------------------------\n");
    printf("total\t\t\tn = %d\t\t\t\t\t\t\t1.00\t100%%\n", frecuencia_total);

    //tendencias
    printf("\nmedidas de tendencia central (datos no agrupados):\n");
    printf("media: %.2f\n", calcular_media(datos, num_datos));
    printf("mediana: %.2f\n", calcular_mediana(datos, num_datos));
    printf("moda: %d\n", calcular_moda(datos, num_datos));
}

int main() {
    int datos[MAX_DATOS] = {15, 22, 30, 18, 25, 33, 19, 28, 35, 20, 27, 31, 16, 24, 29, 32, 21, 26, 34, 17};
    int num_datos = 20;
    int num_clases = (int)(1 + 3.322 * log10(num_datos));

    //clases
    if (num_datos == 1) {
        num_clases = 1;
    } else if (num_clases > MAX_CLASES) {
        num_clases = MAX_CLASES;
    } else if (num_clases <= 0) {
        num_clases = 1;
    }
    
    calcular_frecuencias(datos, num_datos, num_clases);
    
    return 0;
}
